[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "diabetes-tracker"
version = "0.1.0"
description = "AI-Powered Diabetes Management Assistant"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "Flask==2.3.3",
    "Flask-CORS==4.0.0",
    "pandas==2.1.1",
    "openai==1.3.0",
    "python-dotenv==1.0.0",
    "Werkzeug==2.3.7",
]

[project.optional-dependencies]
dev = [
    "ruff==0.1.6",
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "bandit==1.7.5",
    "safety==2.3.5",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

# Only check files in src/
include = [
    "src/**/*.py",
    "tests/**/*.py",
    "setup/**/*.py",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # pyflakes
    "UP",      # pyupgrade
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "PIE",     # flake8-pie
    "TCH",     # flake8-type-checking
    "ARG",     # flake8-unused-arguments
    "ICN",     # flake8-import-conventions
    "E501",    # line too long
]

ignore = [
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "E402",    # Module level import not at top of file
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
known-first-party = ["diabetes_tracker"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini-options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and reporting
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--cov=src/diabetes_tracker",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]

# Markers
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "api: API tests",
    "chart: Chart functionality tests",
]

# Minimum version
minversion = "6.0"

# Test collection
collect_ignore = [
    "setup.py",
    "build/",
    "dist/",
    "*.egg-info/",
]

[tool.coverage.run]
source = ["src/diabetes_tracker"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 